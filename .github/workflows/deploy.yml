name: CI/CD Deployment

on:
  push:
    branches:
      - master  # Trigger deployment on changes to the master branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build the Docker image
      run: |
        docker build -t my-app .

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Tag Docker image
      run: |
        docker tag my-app:latest ${{ secrets.AWS_ECR_REGISTRY }}:latest

    - name: Push Docker image to Amazon ECR
      run: |
        docker push ${{ secrets.AWS_ECR_REGISTRY }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Make sure deployment runs after the build step

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Copy files to EC2 and deploy
      run: |
        echo "$EC2_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem

        ssh -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_IP }} <<EOF
          cd /path/to/your/app
          docker-compose pull  # Pull the latest image from ECR
          docker-compose up -d  # Restart the app with the new image
        EOF
      env:
        EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
